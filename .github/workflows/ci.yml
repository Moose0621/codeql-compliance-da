name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write # for coverage comments
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Run tests with coverage
        run: npm run test

      - name: Check coverage threshold
        run: |
          echo "Checking test coverage..."
          # Extract coverage percentage from lcov.info
          if [ -f coverage/lcov.info ]; then
            lines_covered=$(grep -E "^LH:" coverage/lcov.info | awk -F: '{sum += $2} END {print sum}')
            lines_found=$(grep -E "^LF:" coverage/lcov.info | awk -F: '{sum += $2} END {print sum}')
            if [ "$lines_found" -gt 0 ]; then
              coverage_percent=$((lines_covered * 100 / lines_found))
              echo "Coverage: ${coverage_percent}%"
              if [ "$coverage_percent" -lt 70 ]; then
                echo "‚ùå Coverage ${coverage_percent}% is below 70% threshold"
                exit 1
              else
                echo "‚úÖ Coverage ${coverage_percent}% meets 70% threshold"
              fi
            else
              echo "‚ö†Ô∏è  No coverage data found"
            fi
          else
            echo "‚ö†Ô∏è  No lcov.info file found"
          fi

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist
          retention-days: 30

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage
          retention-days: 7

      - name: Post CI summary
        if: always()
        run: |
          echo "### CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Lint, Typecheck, Test, and Build complete" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/lcov.info ]; then
            lines_covered=$(grep -E "^LH:" coverage/lcov.info | awk -F: '{sum += $2} END {print sum}' || echo "0")
            lines_found=$(grep -E "^LF:" coverage/lcov.info | awk -F: '{sum += $2} END {print sum}' || echo "1")
            coverage_percent=$((lines_covered * 100 / lines_found))
            echo "üìä Test Coverage: ${coverage_percent}%" >> $GITHUB_STEP_SUMMARY
          fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Check for security vulnerabilities
        run: |
          npm audit --json > audit-results.json || true
          if [ -f audit-results.json ]; then
            high_vulns=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
            critical_vulns=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
            total_high_critical=$((high_vulns + critical_vulns))
            
            if [ "$total_high_critical" -gt 0 ]; then
              echo "‚ùå Found $total_high_critical high/critical vulnerabilities"
              echo "High: $high_vulns, Critical: $critical_vulns"
              jq '.vulnerabilities' audit-results.json
              exit 1
            else
              echo "‚úÖ No high or critical vulnerabilities found"
            fi
          fi

  # Placeholder for future e2e job (Playwright)
  # e2e:
  #   needs: build-and-verify
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: dist-${{ github.sha }}
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Run Playwright tests
  #       run: npx playwright test --reporter=dot
  #     - name: Upload test report
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: playwright-report-${{ github.sha }}
  #         path: playwright-report

# Notes:
# - CodeQL / dependency scanning can be appended in a separate workflow.
# - When tests are added, add a coverage step and comment on PR with results.
# - Consider adding caching for build output if build time becomes significant.