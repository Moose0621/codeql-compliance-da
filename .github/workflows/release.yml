name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  NODE_VERSION: '20.x'

permissions:
  contents: write
  id-token: write # for Azure OIDC

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    outputs:
      release-id: ${{ steps.create_release.outputs.id }}
      release-upload-url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for changelog

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Build production
        run: npm run build

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "## Changes" > CHANGELOG.md
            echo "Initial release" >> CHANGELOG.md
          else
            echo "## Changes since $LAST_TAG" > CHANGELOG.md
            git log --oneline --no-merges "$LAST_TAG"..HEAD | sed 's/^/- /' >> CHANGELOG.md
          fi
          
          # Set multiline output
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: codeql-compliance-dashboard-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Package build artifacts
        run: |
          cd dist
          zip -r ../codeql-compliance-dashboard-${{ github.ref_name }}.zip .

  deploy-production:
    name: Deploy to Azure Production
    runs-on: ubuntu-latest
    needs: release
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "."
          output_location: "dist"
          api_location: "api" # Will be created later for Functions

      - name: Post deployment summary
        run: |
          echo "### ðŸš€ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "Release: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "Azure Static Web Apps deployment successful" >> $GITHUB_STEP_SUMMARY