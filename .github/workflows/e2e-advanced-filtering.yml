name: E2E Advanced Filtering Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'playwright.config.ts'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'playwright.config.ts'
      - 'package.json'
      - 'package-lock.json'
  schedule:
    # Run daily at 2 AM UTC for monitoring
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Which test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - functional
          - performance
          - accessibility
          - responsive
          - visual

env:
  NODE_VERSION: '18.x'
  PLAYWRIGHT_BROWSERS_PATH: '${{ github.workspace }}/ms-playwright'

jobs:
  # Pre-flight checks
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.changes.outputs.should-run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Run unit tests
        run: npm run test

      - name: Check for test changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif git diff --quiet HEAD~1 HEAD -- 'src/**' 'tests/e2e/**' 'playwright.config.ts'; then
            echo "should-run=false" >> $GITHUB_OUTPUT
          else
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi

  # Functional E2E Tests
  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true' && (github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'functional' || github.event.inputs.test_suite == '')
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: |
          npx playwright install ${{ matrix.browser }} --with-deps
          
      - name: Build application
        run: npm run build

      - name: Run functional E2E tests
        run: npx playwright test advanced-filtering.spec.ts --project=${{ matrix.browser }}
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: functional-test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Performance & Accessibility Tests
  performance-accessibility-tests:
    name: Performance & Accessibility Tests
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true' && (github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'performance' || github.event.inputs.test_suite == 'accessibility' || github.event.inputs.test_suite == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npx playwright test performance-accessibility.spec.ts --project=performance
        env:
          CI: true

      - name: Run accessibility tests
        run: npx playwright test performance-accessibility.spec.ts --project=accessibility
        env:
          CI: true

      - name: Upload performance metrics
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-metrics
          path: |
            test-results/performance-*.json
            test-results/accessibility-*.json
          retention-days: 30

  # Responsive Design Tests
  responsive-tests:
    name: Responsive Design Tests
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true' && (github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'responsive' || github.event.inputs.test_suite == '')
    strategy:
      fail-fast: false
      matrix:
        device: ['Mobile Chrome', 'Mobile Safari', 'iPad']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run responsive tests
        run: npx playwright test responsive-design.spec.ts --project="${{ matrix.device }}"
        env:
          CI: true

      - name: Upload responsive test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: responsive-test-results-${{ matrix.device }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Visual Regression Tests
  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true' && (github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'visual' || github.event.inputs.test_suite == '')
    strategy:
      fail-fast: false
      matrix:
        browser: [visual-chromium, visual-firefox]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run visual regression tests
        run: npx playwright test visual-regression.spec.ts --project=${{ matrix.browser }}
        env:
          CI: true

      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-regression-diffs-${{ matrix.browser }}
          path: |
            test-results/
            tests/e2e/visual-regression.spec.ts-snapshots/
          retention-days: 14

  # Consolidate Results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [functional-tests, performance-accessibility-tests, responsive-tests, visual-regression-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate test summary
        run: |
          echo "## üß™ E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Functional tests
          if [ "${{ needs.functional-tests.result }}" == "success" ]; then
            echo "‚úÖ **Functional Tests**: All browser tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.functional-tests.result }}" == "failure" ]; then
            echo "‚ùå **Functional Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Functional Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance tests
          if [ "${{ needs.performance-accessibility-tests.result }}" == "success" ]; then
            echo "‚úÖ **Performance & Accessibility Tests**: All checks passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.performance-accessibility-tests.result }}" == "failure" ]; then
            echo "‚ùå **Performance & Accessibility Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Performance & Accessibility Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Responsive tests
          if [ "${{ needs.responsive-tests.result }}" == "success" ]; then
            echo "‚úÖ **Responsive Design Tests**: All device tests passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.responsive-tests.result }}" == "failure" ]; then
            echo "‚ùå **Responsive Design Tests**: Some tests failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Responsive Design Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Visual regression tests
          if [ "${{ needs.visual-regression-tests.result }}" == "success" ]; then
            echo "‚úÖ **Visual Regression Tests**: No visual changes detected" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.visual-regression-tests.result }}" == "failure" ]; then
            echo "‚ùå **Visual Regression Tests**: Visual changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Visual Regression Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Artifacts**: Test results and screenshots are available for download" >> $GITHUB_STEP_SUMMARY

      - name: Set final status
        run: |
          if [[ "${{ needs.functional-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.performance-accessibility-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.responsive-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.visual-regression-tests.result }}" == "failure" ]]; then
            echo "Some E2E tests failed"
            exit 1
          else
            echo "All E2E tests passed successfully"
          fi

  # Notify on failure (optional - requires setup)
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: failure() && github.event_name != 'pull_request'
    steps:
      - name: Send notification
        run: |
          echo "E2E tests failed on ${{ github.ref_name }}"
          # Add Slack/Discord/email notification here if needed